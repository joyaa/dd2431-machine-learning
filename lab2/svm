from cvxopt.solvers import qp
from cvxopt.base import matrix

import numpy as np, pylab as pl, random, math

def kernel_linear(x, y): #takes two vectors x and y
	return np.dot(x, y) + 1 #add 1 for bias


def generateData():
	#normalvariate(mean, standard deviation)
	classA = 	[(random.normalvariate(-1.5, 1),
				  random.normalvariate(0.5, 1),
				  1.0)]
				 for i in range(5)] + \
				[(random.normalvariate(1.5, 1),
				  random.normalvariate(0.5, 1),
				  1.0)]
				for i in range(5)]

	classB = 	[(random.normalvariate(0.0, 0.5),
		  		  random.normalvariate(-0.5. 0.5),
				  -1.0)
			 	for i in range(10)]
	
	data = classA + classB
	random.shuffle(data)
	return data


def plotData():
	pylab.hold(True)
	pylab.plot( [p[0] for p in classA],
				[p[1] for p in classA],
				'bo')

	pylab.plot( [p[0] for p in classB],
				[p[1] for p in classB],
				'ro')
	pylab.show()